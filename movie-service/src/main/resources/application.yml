topic:
  movie: dev-movie
  reply:
    movieToStream: dev-movie-stream-reply

event:
  movie:
    findStoredFile: movie-stored-file.find

loki:
  url: ${LOKI_URL}

server:
  port: ${SERVER_PORT}

spring:
  application:
    name: movie-service
  jpa:
    openInView: false
    databasePlatform: org.hibernate.dialect.MySQL5InnoDBDialect
    hibernate:
      ddlAuto: update
  datasource:
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${MYSQL_URL}?autoReconnect=true&allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${AUTH_SERVICE_URL}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS_URL}
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: ${KAFKA_CONSUMER_GROUP_ID}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
eureka:
  client:
    serviceUrl:
      defaultZone: ${DISCOVERY_SERVICE_URL}
