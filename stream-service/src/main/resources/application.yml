topic:
  movie: dev-movie
  user: dev-user
  reply:
    userToStream: dev-user-stream-reply
    movieToStream: dev-movie-stream-reply

event:
  movie:
    findStoredFile: movie-stored-file.find
  user:
    findStoredFile: user-stored-file.find

root:
  location: ${LOCAL_STORAGE}

gateway:
  url: ${GATEWAY_URL}

server:
  port: ${SERVER_PORT}

loki:
  url: ${LOKI_URL}

spring:
  application:
    name: stream-service
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${AUTH_SERVICE_URL}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS_URL}
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: ${KAFKA_CONSUMER_GROUP_ID}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

management:
  metrics:
    tags:
      application: ${spring.application.name}
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: prometheus

eureka:
  client:
    serviceUrl:
      defaultZone: ${DISCOVERY_SERVICE_URL}
